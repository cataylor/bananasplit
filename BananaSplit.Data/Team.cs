//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BananaSplit.Data
{
    public partial class Team
    {
        #region Primitive Properties
    
        public virtual long TeamId
        {
            get;
            set;
        }
    
        public virtual string TeamName
        {
            get;
            set;
        }
    
        public virtual int LocationId
        {
            get { return _locationId; }
            set
            {
                if (_locationId != value)
                {
                    if (Location != null && Location.LocationId != value)
                    {
                        Location = null;
                    }
                    _locationId = value;
                }
            }
        }
        private int _locationId;

        #endregion
        #region Navigation Properties
    
        public virtual Location Location
        {
            get { return _location; }
            set
            {
                if (!ReferenceEquals(_location, value))
                {
                    var previousValue = _location;
                    _location = value;
                    FixupLocation(previousValue);
                }
            }
        }
        private Location _location;
    
        public virtual ICollection<TicketPrice> TicketPrices
        {
            get
            {
                if (_ticketPrices == null)
                {
                    var newCollection = new FixupCollection<TicketPrice>();
                    newCollection.CollectionChanged += FixupTicketPrices;
                    _ticketPrices = newCollection;
                }
                return _ticketPrices;
            }
            set
            {
                if (!ReferenceEquals(_ticketPrices, value))
                {
                    var previousValue = _ticketPrices as FixupCollection<TicketPrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTicketPrices;
                    }
                    _ticketPrices = value;
                    var newValue = value as FixupCollection<TicketPrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTicketPrices;
                    }
                }
            }
        }
        private ICollection<TicketPrice> _ticketPrices;

        #endregion
        #region Association Fixup
    
        private void FixupLocation(Location previousValue)
        {
            if (previousValue != null && previousValue.Teams.Contains(this))
            {
                previousValue.Teams.Remove(this);
            }
    
            if (Location != null)
            {
                if (!Location.Teams.Contains(this))
                {
                    Location.Teams.Add(this);
                }
                if (LocationId != Location.LocationId)
                {
                    LocationId = Location.LocationId;
                }
            }
        }
    
        private void FixupTicketPrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (TicketPrice item in e.NewItems)
                {
                    item.Team = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TicketPrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Team, this))
                    {
                        item.Team = null;
                    }
                }
            }
        }

        #endregion
    }
}
