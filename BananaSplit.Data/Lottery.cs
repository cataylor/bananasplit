//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BananaSplit.Data
{
    public partial class Lottery
    {
        #region Primitive Properties
    
        public virtual long LotteryId
        {
            get;
            set;
        }
    
        public virtual long PartnershipId
        {
            get { return _partnershipId; }
            set
            {
                if (_partnershipId != value)
                {
                    if (Partnership != null && Partnership.PartnershipId != value)
                    {
                        Partnership = null;
                    }
                    _partnershipId = value;
                }
            }
        }
        private long _partnershipId;
    
        public virtual byte NumberOfParticipants
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Partnership Partnership
        {
            get { return _partnership; }
            set
            {
                if (!ReferenceEquals(_partnership, value))
                {
                    var previousValue = _partnership;
                    _partnership = value;
                    FixupPartnership(previousValue);
                }
            }
        }
        private Partnership _partnership;
    
        public virtual ICollection<LotteryOrder> LotteryOrders
        {
            get
            {
                if (_lotteryOrders == null)
                {
                    var newCollection = new FixupCollection<LotteryOrder>();
                    newCollection.CollectionChanged += FixupLotteryOrders;
                    _lotteryOrders = newCollection;
                }
                return _lotteryOrders;
            }
            set
            {
                if (!ReferenceEquals(_lotteryOrders, value))
                {
                    var previousValue = _lotteryOrders as FixupCollection<LotteryOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLotteryOrders;
                    }
                    _lotteryOrders = value;
                    var newValue = value as FixupCollection<LotteryOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLotteryOrders;
                    }
                }
            }
        }
        private ICollection<LotteryOrder> _lotteryOrders;
    
        public virtual ICollection<PreLotteryOrder> PreLotteryOrders
        {
            get
            {
                if (_preLotteryOrders == null)
                {
                    var newCollection = new FixupCollection<PreLotteryOrder>();
                    newCollection.CollectionChanged += FixupPreLotteryOrders;
                    _preLotteryOrders = newCollection;
                }
                return _preLotteryOrders;
            }
            set
            {
                if (!ReferenceEquals(_preLotteryOrders, value))
                {
                    var previousValue = _preLotteryOrders as FixupCollection<PreLotteryOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPreLotteryOrders;
                    }
                    _preLotteryOrders = value;
                    var newValue = value as FixupCollection<PreLotteryOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPreLotteryOrders;
                    }
                }
            }
        }
        private ICollection<PreLotteryOrder> _preLotteryOrders;

        #endregion
        #region Association Fixup
    
        private void FixupPartnership(Partnership previousValue)
        {
            if (previousValue != null && previousValue.Lotteries.Contains(this))
            {
                previousValue.Lotteries.Remove(this);
            }
    
            if (Partnership != null)
            {
                if (!Partnership.Lotteries.Contains(this))
                {
                    Partnership.Lotteries.Add(this);
                }
                if (PartnershipId != Partnership.PartnershipId)
                {
                    PartnershipId = Partnership.PartnershipId;
                }
            }
        }
    
        private void FixupLotteryOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LotteryOrder item in e.NewItems)
                {
                    item.Lottery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LotteryOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lottery, this))
                    {
                        item.Lottery = null;
                    }
                }
            }
        }
    
        private void FixupPreLotteryOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PreLotteryOrder item in e.NewItems)
                {
                    item.Lottery = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PreLotteryOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Lottery, this))
                    {
                        item.Lottery = null;
                    }
                }
            }
        }

        #endregion
    }
}
