//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BananaSplit.Data
{
    public partial class Member
    {
        #region Primitive Properties
    
        public virtual long MemberId
        {
            get;
            set;
        }
    
        public virtual string FirstName
        {
            get;
            set;
        }
    
        public virtual string LastName
        {
            get;
            set;
        }
    
        public virtual string Email
        {
            get;
            set;
        }
    
        public virtual bool IsVerified
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }
    
        public virtual string FacebookId
        {
            get;
            set;
        }
    
        public virtual int MemberTypeId
        {
            get { return _memberTypeId; }
            set
            {
                if (_memberTypeId != value)
                {
                    if (MemberType != null && MemberType.MemberTypeId != value)
                    {
                        MemberType = null;
                    }
                    _memberTypeId = value;
                }
            }
        }
        private int _memberTypeId;
    
        public virtual string PhoneNumber
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateUpdated
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateLastAccessed
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ApiAccess> ApiAccesses
        {
            get
            {
                if (_apiAccesses == null)
                {
                    var newCollection = new FixupCollection<ApiAccess>();
                    newCollection.CollectionChanged += FixupApiAccesses;
                    _apiAccesses = newCollection;
                }
                return _apiAccesses;
            }
            set
            {
                if (!ReferenceEquals(_apiAccesses, value))
                {
                    var previousValue = _apiAccesses as FixupCollection<ApiAccess>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupApiAccesses;
                    }
                    _apiAccesses = value;
                    var newValue = value as FixupCollection<ApiAccess>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupApiAccesses;
                    }
                }
            }
        }
        private ICollection<ApiAccess> _apiAccesses;
    
        public virtual ICollection<Invoice> Invoices
        {
            get
            {
                if (_invoices == null)
                {
                    var newCollection = new FixupCollection<Invoice>();
                    newCollection.CollectionChanged += FixupInvoices;
                    _invoices = newCollection;
                }
                return _invoices;
            }
            set
            {
                if (!ReferenceEquals(_invoices, value))
                {
                    var previousValue = _invoices as FixupCollection<Invoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvoices;
                    }
                    _invoices = value;
                    var newValue = value as FixupCollection<Invoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvoices;
                    }
                }
            }
        }
        private ICollection<Invoice> _invoices;
    
        public virtual ICollection<Invoice> Invoices1
        {
            get
            {
                if (_invoices1 == null)
                {
                    var newCollection = new FixupCollection<Invoice>();
                    newCollection.CollectionChanged += FixupInvoices1;
                    _invoices1 = newCollection;
                }
                return _invoices1;
            }
            set
            {
                if (!ReferenceEquals(_invoices1, value))
                {
                    var previousValue = _invoices1 as FixupCollection<Invoice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupInvoices1;
                    }
                    _invoices1 = value;
                    var newValue = value as FixupCollection<Invoice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupInvoices1;
                    }
                }
            }
        }
        private ICollection<Invoice> _invoices1;
    
        public virtual MemberType MemberType
        {
            get { return _memberType; }
            set
            {
                if (!ReferenceEquals(_memberType, value))
                {
                    var previousValue = _memberType;
                    _memberType = value;
                    FixupMemberType(previousValue);
                }
            }
        }
        private MemberType _memberType;
    
        public virtual ICollection<LotteryOrder> LotteryOrders
        {
            get
            {
                if (_lotteryOrders == null)
                {
                    var newCollection = new FixupCollection<LotteryOrder>();
                    newCollection.CollectionChanged += FixupLotteryOrders;
                    _lotteryOrders = newCollection;
                }
                return _lotteryOrders;
            }
            set
            {
                if (!ReferenceEquals(_lotteryOrders, value))
                {
                    var previousValue = _lotteryOrders as FixupCollection<LotteryOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLotteryOrders;
                    }
                    _lotteryOrders = value;
                    var newValue = value as FixupCollection<LotteryOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLotteryOrders;
                    }
                }
            }
        }
        private ICollection<LotteryOrder> _lotteryOrders;
    
        public virtual ICollection<MemberPartnership> MemberPartnerships
        {
            get
            {
                if (_memberPartnerships == null)
                {
                    var newCollection = new FixupCollection<MemberPartnership>();
                    newCollection.CollectionChanged += FixupMemberPartnerships;
                    _memberPartnerships = newCollection;
                }
                return _memberPartnerships;
            }
            set
            {
                if (!ReferenceEquals(_memberPartnerships, value))
                {
                    var previousValue = _memberPartnerships as FixupCollection<MemberPartnership>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMemberPartnerships;
                    }
                    _memberPartnerships = value;
                    var newValue = value as FixupCollection<MemberPartnership>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMemberPartnerships;
                    }
                }
            }
        }
        private ICollection<MemberPartnership> _memberPartnerships;
    
        public virtual ICollection<PartnershipGame> PartnershipGames
        {
            get
            {
                if (_partnershipGames == null)
                {
                    var newCollection = new FixupCollection<PartnershipGame>();
                    newCollection.CollectionChanged += FixupPartnershipGames;
                    _partnershipGames = newCollection;
                }
                return _partnershipGames;
            }
            set
            {
                if (!ReferenceEquals(_partnershipGames, value))
                {
                    var previousValue = _partnershipGames as FixupCollection<PartnershipGame>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPartnershipGames;
                    }
                    _partnershipGames = value;
                    var newValue = value as FixupCollection<PartnershipGame>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPartnershipGames;
                    }
                }
            }
        }
        private ICollection<PartnershipGame> _partnershipGames;
    
        public virtual ICollection<PreLotteryOrder> PreLotteryOrders
        {
            get
            {
                if (_preLotteryOrders == null)
                {
                    var newCollection = new FixupCollection<PreLotteryOrder>();
                    newCollection.CollectionChanged += FixupPreLotteryOrders;
                    _preLotteryOrders = newCollection;
                }
                return _preLotteryOrders;
            }
            set
            {
                if (!ReferenceEquals(_preLotteryOrders, value))
                {
                    var previousValue = _preLotteryOrders as FixupCollection<PreLotteryOrder>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPreLotteryOrders;
                    }
                    _preLotteryOrders = value;
                    var newValue = value as FixupCollection<PreLotteryOrder>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPreLotteryOrders;
                    }
                }
            }
        }
        private ICollection<PreLotteryOrder> _preLotteryOrders;

        #endregion
        #region Association Fixup
    
        private void FixupMemberType(MemberType previousValue)
        {
            if (previousValue != null && previousValue.Members.Contains(this))
            {
                previousValue.Members.Remove(this);
            }
    
            if (MemberType != null)
            {
                if (!MemberType.Members.Contains(this))
                {
                    MemberType.Members.Add(this);
                }
                if (MemberTypeId != MemberType.MemberTypeId)
                {
                    MemberTypeId = MemberType.MemberTypeId;
                }
            }
        }
    
        private void FixupApiAccesses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ApiAccess item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ApiAccess item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }
    
        private void FixupInvoices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }
    
        private void FixupInvoices1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Invoice item in e.NewItems)
                {
                    item.Member1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Invoice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member1, this))
                    {
                        item.Member1 = null;
                    }
                }
            }
        }
    
        private void FixupLotteryOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LotteryOrder item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LotteryOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }
    
        private void FixupMemberPartnerships(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MemberPartnership item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MemberPartnership item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }
    
        private void FixupPartnershipGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PartnershipGame item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PartnershipGame item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }
    
        private void FixupPreLotteryOrders(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PreLotteryOrder item in e.NewItems)
                {
                    item.Member = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PreLotteryOrder item in e.OldItems)
                {
                    if (ReferenceEquals(item.Member, this))
                    {
                        item.Member = null;
                    }
                }
            }
        }

        #endregion
    }
}
