//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace BananaSplit.Data
{
    public partial class Game
    {
        #region Primitive Properties
    
        public virtual int GameId
        {
            get;
            set;
        }
    
        public virtual long SeasonId
        {
            get { return _seasonId; }
            set
            {
                if (_seasonId != value)
                {
                    if (Season != null && Season.SeasonId != value)
                    {
                        Season = null;
                    }
                    _seasonId = value;
                }
            }
        }
        private long _seasonId;
    
        public virtual long TeamId
        {
            get { return _teamId; }
            set
            {
                if (_teamId != value)
                {
                    if (Team != null && Team.TeamId != value)
                    {
                        Team = null;
                    }
                    if (Team1 != null && Team1.TeamId != value)
                    {
                        Team1 = null;
                    }
                    _teamId = value;
                }
            }
        }
        private long _teamId;
    
        public virtual long VisitingTeamId
        {
            get;
            set;
        }
    
        public virtual string EventLocation
        {
            get;
            set;
        }
    
        public virtual string TimeZone
        {
            get;
            set;
        }
    
        public virtual System.DateTime EventStartDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime EventEndDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateUpdated
        {
            get;
            set;
        }
    
        public virtual bool IsActive
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual Season Season
        {
            get { return _season; }
            set
            {
                if (!ReferenceEquals(_season, value))
                {
                    var previousValue = _season;
                    _season = value;
                    FixupSeason(previousValue);
                }
            }
        }
        private Season _season;
    
        public virtual Team Team
        {
            get { return _team; }
            set
            {
                if (!ReferenceEquals(_team, value))
                {
                    var previousValue = _team;
                    _team = value;
                    FixupTeam(previousValue);
                }
            }
        }
        private Team _team;
    
        public virtual Team Team1
        {
            get { return _team1; }
            set
            {
                if (!ReferenceEquals(_team1, value))
                {
                    var previousValue = _team1;
                    _team1 = value;
                    FixupTeam1(previousValue);
                }
            }
        }
        private Team _team1;
    
        public virtual ICollection<GamePrice> GamePrices
        {
            get
            {
                if (_gamePrices == null)
                {
                    var newCollection = new FixupCollection<GamePrice>();
                    newCollection.CollectionChanged += FixupGamePrices;
                    _gamePrices = newCollection;
                }
                return _gamePrices;
            }
            set
            {
                if (!ReferenceEquals(_gamePrices, value))
                {
                    var previousValue = _gamePrices as FixupCollection<GamePrice>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGamePrices;
                    }
                    _gamePrices = value;
                    var newValue = value as FixupCollection<GamePrice>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGamePrices;
                    }
                }
            }
        }
        private ICollection<GamePrice> _gamePrices;
    
        public virtual ICollection<PartnershipGame> PartnershipGames
        {
            get
            {
                if (_partnershipGames == null)
                {
                    var newCollection = new FixupCollection<PartnershipGame>();
                    newCollection.CollectionChanged += FixupPartnershipGames;
                    _partnershipGames = newCollection;
                }
                return _partnershipGames;
            }
            set
            {
                if (!ReferenceEquals(_partnershipGames, value))
                {
                    var previousValue = _partnershipGames as FixupCollection<PartnershipGame>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPartnershipGames;
                    }
                    _partnershipGames = value;
                    var newValue = value as FixupCollection<PartnershipGame>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPartnershipGames;
                    }
                }
            }
        }
        private ICollection<PartnershipGame> _partnershipGames;

        #endregion
        #region Association Fixup
    
        private void FixupSeason(Season previousValue)
        {
            if (previousValue != null && previousValue.Games.Contains(this))
            {
                previousValue.Games.Remove(this);
            }
    
            if (Season != null)
            {
                if (!Season.Games.Contains(this))
                {
                    Season.Games.Add(this);
                }
                if (SeasonId != Season.SeasonId)
                {
                    SeasonId = Season.SeasonId;
                }
            }
        }
    
        private void FixupTeam(Team previousValue)
        {
            if (previousValue != null && previousValue.Games.Contains(this))
            {
                previousValue.Games.Remove(this);
            }
    
            if (Team != null)
            {
                if (!Team.Games.Contains(this))
                {
                    Team.Games.Add(this);
                }
                if (TeamId != Team.TeamId)
                {
                    TeamId = Team.TeamId;
                }
            }
        }
    
        private void FixupTeam1(Team previousValue)
        {
            if (previousValue != null && previousValue.Games1.Contains(this))
            {
                previousValue.Games1.Remove(this);
            }
    
            if (Team1 != null)
            {
                if (!Team1.Games1.Contains(this))
                {
                    Team1.Games1.Add(this);
                }
                if (TeamId != Team1.TeamId)
                {
                    TeamId = Team1.TeamId;
                }
            }
        }
    
        private void FixupGamePrices(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (GamePrice item in e.NewItems)
                {
                    item.Game = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (GamePrice item in e.OldItems)
                {
                    if (ReferenceEquals(item.Game, this))
                    {
                        item.Game = null;
                    }
                }
            }
        }
    
        private void FixupPartnershipGames(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (PartnershipGame item in e.NewItems)
                {
                    item.Game = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (PartnershipGame item in e.OldItems)
                {
                    if (ReferenceEquals(item.Game, this))
                    {
                        item.Game = null;
                    }
                }
            }
        }

        #endregion
    }
}
